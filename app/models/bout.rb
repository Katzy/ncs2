class Bout < ActiveRecord::Base
  after_update :update_wrestler_record, :if => :win_loss_changed?

  acts_as_xlsx


  belongs_to :wrestler
  # belongs_to :season_wrestler
  
  validates :weight, presence: true, null: false
  validates :dual_or_tourney, presence: true, null: false
  validates :date, presence: true
  validates :opponent_name, presence: true, null: false
  validates :win_loss, presence: true, null: false
  validates :result_type, presence: true, null: false
  validates :score_time, presence: true, null: false
  validates :opponent_team, presence: true, null: false

  def update_wrestler_record
    @b = Bout.find(self.id)
    @w = Wrestler.find(@b.wrestler_id)
    if self.win_loss == "W"
      @w.wins += 1
      @w.losses -= 1
    else
      @w.wins -= 1
      @w.losses += 1
    end
    @w.save
  end

  def self.import(file)
    CSV.foreach(file.path, headers: true) do |row|
      if Bout.exists?(weight: row[2], date: row[1], opponent_name: row[4], opponent_team: row[5])
       row
      else
       Bout.create! row.to_hash
     end
    end
  end

  def self.download(wrestler)
    CSV.generate do |csv|
      csv << ["wrestler_id", "date", "weight", "dual_or_tourney", "opponent_name", "opponent_team", "result_type", "win_loss", "score_time", "tourney_place", "tourney_name"]
      csv << [ "**  DELETE THESE ROWS BEFORE IMPORTING                            " ]
      csv << [ "**    The following is how each cell should be formatted          " ]
      csv << [ "**     wrestler_id -  autogenerated by form  (Can't be blank)     " ]
      csv << [ "**     date - MM/DD/YY format is best        (Can't be blank)     " ]     
      csv << [ "**     weight -  autogenerated by this form  (Can't be blank)     " ]
      csv << [ "**     dual_or_tourney -  Enter 'Dual or T'  (Can't be blank)     " ]
      csv << [ "**     opponent_name -  First and Last       (Can't be blank)     " ]
      csv << [ "**     opponent_team -  Spell it correctly   (Can't be blank)     " ]
      csv << [ "**     result_type -  D, MD, TF, F, FF       (Can't be blank)     " ]           
      csv << [ "**     win_loss -  W or L                    (Can't be blank)     " ]
      csv << [ "**     score_time -  ex:  5-1  or  3:27      (Can't be blank)     " ]
      csv << [ "**     tourney_place -  Only needs to be in there once            " ]      
      csv << [ "**     tourney_name -  be consistent with the spelling            " ] 
      csv << [ "**  DELETE THESE ROWS BEFORE IMPORTING                            " ]     
      csv << [  wrestler.id, "12/16/2017", wrestler.weight, "T", "Steve Johnson", "Arroyo", "MD", "W", "9 -- 1", "1", "Chuck Chansi"]
      csv << [ wrestler.id, "12/16/2017", wrestler.weight, "T", "Bob McPhereson", "Casa Grande", "F", "W", "F 2:38", "", "Chuck Chansi"  ]
      csv << [ wrestler.id, "12/19/2017", wrestler.weight, "DUAL", "Lance Smith", "Gilroy", "D", "L", "2-1" ]
    end
  end

  def self.to_csv(options = {}, example)
    CSV.generate(options) do |csv|
      csv << [ "weight", "last_name", "first_name", "dual_or_tourney", "tourney_name", "tourney_seed", "opponent_team", "opponent_name", "win_loss", "result_type", "score_time", "tourney_place"]

      example.each do |bout|
       csv << [wrestler.weight, wrestler.first_name, wrestler.last_name, wrestler.school.league.name, wrestler.school.name, wrestler.school.abbreviation, wrestler.grade, wrestler.wins, wrestler.losses, wrestler.seed, wrestler.league_place, wrestler.section_place, wrestler.state_place]
      end
    end
  end
end
